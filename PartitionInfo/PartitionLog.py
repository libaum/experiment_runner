# automatically generated by the FlatBuffers compiler, do not modify

# namespace: PartitionInfo

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PartitionLog(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PartitionLog()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPartitionLog(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PartitionLog
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PartitionLog
    def GraphMetadata(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from PartitionInfo.GraphMetadata import GraphMetadata
            obj = GraphMetadata()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PartitionLog
    def PartitionConfiguration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from PartitionInfo.PartitionConfiguration import PartitionConfiguration
            obj = PartitionConfiguration()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PartitionLog
    def Runtime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from PartitionInfo.RunTime import RunTime
            obj = RunTime()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PartitionLog
    def MemoryConsumption(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from PartitionInfo.MemoryConsumption import MemoryConsumption
            obj = MemoryConsumption()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PartitionLog
    def Metrics(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from PartitionInfo.PartitionMetrics import PartitionMetrics
            obj = PartitionMetrics()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def PartitionLogStart(builder):
    builder.StartObject(5)

def Start(builder):
    PartitionLogStart(builder)

def PartitionLogAddGraphMetadata(builder, graphMetadata):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(graphMetadata), 0)

def AddGraphMetadata(builder, graphMetadata):
    PartitionLogAddGraphMetadata(builder, graphMetadata)

def PartitionLogAddPartitionConfiguration(builder, partitionConfiguration):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(partitionConfiguration), 0)

def AddPartitionConfiguration(builder, partitionConfiguration):
    PartitionLogAddPartitionConfiguration(builder, partitionConfiguration)

def PartitionLogAddRuntime(builder, runtime):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(runtime), 0)

def AddRuntime(builder, runtime):
    PartitionLogAddRuntime(builder, runtime)

def PartitionLogAddMemoryConsumption(builder, memoryConsumption):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(memoryConsumption), 0)

def AddMemoryConsumption(builder, memoryConsumption):
    PartitionLogAddMemoryConsumption(builder, memoryConsumption)

def PartitionLogAddMetrics(builder, metrics):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(metrics), 0)

def AddMetrics(builder, metrics):
    PartitionLogAddMetrics(builder, metrics)

def PartitionLogEnd(builder):
    return builder.EndObject()

def End(builder):
    return PartitionLogEnd(builder)
